.. _section-ivabs-start:

Quick Start
============

..  note::

    In the instructions below ``IVABS_ROOT`` refers to the root directory of iVABS where you installed iVABS.




Run iVABS with a simple example
-------------------------------

Start the shell/terminal that is configured during the installation.

Optionally change the python virtual environment.
For example, if Python 3 and all dependencies are installed in a virtual environment named ``py3ivabs`` using Anaconda, then activate it using

..  code-block:: shell

    conda activate py3ivabs

Go to the directory ``IVABS_ROOT/examples/e0_quickstart``

..  code-block:: shell

    cd IVABS_ROOT/examples/e0_quickstart

Run the example

..  code-block:: shell

    python run.py cs_param_study.yml

If everything works fine, several output files will be generated.
In the file ``cs_param_study.out``, the following message should appear.

..  code-block:: none

    <<<<< Iterator multidim_parameter_study completed.
    <<<<< Environment execution completed.
    DAKOTA execution time in seconds:
    Total CPU        =     34.003 [parent =     34.003, child =          0]
    Total wall clock =     34.003

This example runs about half minute.




Files of this example
---------------------

Here is a quick overview of the layout of files in this example.
Most of them are required inputs for all studies.

This example carries out a simple parameter study of a single cross-section by varying two design variables.
The base design of this cross-section has an airfoil profile with a main box-type spar, which is typically seen in helicopter rotor blades.
The two design variables control the locations of the front and back spar webs.


Input files
~~~~~~~~~~~

``airfoil_gbox_uni.xml.tmp``
    This is the design template for this type of cross-section.
    Different studies may need one or more design templates.

    More details on design templates can be found in Section :ref:`section-cs-templates`.

``material_database_us_ft.xml``
    This is the material database used by the cross-sectional input.

    More details on the material input can be found in Section :ref:`section-material-layup`.

``SC1095.dat``
    This is the airfoil data file used by the cross-sectional input.

``cs_param_study.yml``
    This is the main input for all studies.
    It contains most of the information needed.

    More details on the main input can be found in Section :ref:`section-input-guide`.

``run.py``
    This is the startup script.
    Required for all cases, but no changes needed and can be directly copied to different working directory.


Output files
~~~~~~~~~~~~

iVABS mainly uses Dakota as the optimization tool.
Hence, most output files are from Dakota.

``cs_param_study.dakota``
    This is the Dakota input generated by iVABS from ``cs_param_study.yml``.

``cs_param_study.out``
    This is the Dakota main output file including a summary of the process.

``cs_param_study.results.txt``
    This is the Dakota result file.
    Contents could be different for different Dakota method.

``cs_param_study_tabular.dat``
    This contains a table of inputs and outputs of each evaluation/iteration.

``cs_param_study.rst``
    This is the Dakota restart file.
    If the Dakota process stops for some reason, you can try to continue the process from the stopping point, using the following command::

        dakota -i cs_param_study.dakota -read_restart cs_param_study.rst

``cs_param_study.err``
    This is the Dakota error file.

``evals/eval.#/``
    Each folder contains all input and output files for a single evaluation/iteration.


iVABS running options
---------------------

The general command syntax to run an iVABS study is

..  code-block:: shell

    python run.py main_input.yml [mode] [dakota_params.in dakota_results.out]

There are several running modes.

Mode 0: Generate Dakota input and run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

..  code-block:: shell

    python run.py main_input.yml

Default mode.


Mode 1: Run a single analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

..  code-block:: shell

    python run.py main_input.yml 1 params.in results.out

This mode in mainly for the use by Dakota for each evaluation/iteration.


Mode 2: Generate Dakota input only
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

..  code-block:: shell

    python run.py main_input.yml 2

The process will stop after generating the Dakota input.




Other examples
--------------

More examples can be found in Section :ref:`section-ivabs-examples`.
