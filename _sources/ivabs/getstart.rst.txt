.. _section-ivabs-start:

Quick Start
============

..  note::

    ``IVABS_ROOT`` refers to the root directory of iVABS after installation.




Run iVABS with a simple example
-------------------------------

Start the shell/terminal that is configured during the installation.
Please refer to :ref:`section-ivabs_install` for more information.

    If you are using Python virtual environment managed by Anaconda (see :doc:`/ivabs/install/python_setup`), you need to activate it first.
    For example, if Python 3.6 and all dependencies are installed in a virtual environment named ``py3ivabs``, then activate it using

    ..  code-block:: shell

        conda activate py3ivabs

Go to the directory ``IVABS_ROOT/examples/e0_quickstart``

..  code-block:: shell

    cd IVABS_ROOT/examples/e0_quickstart

Run the example using the following command.
Note: The actual Python command may vary depending on your environment setup, such as ``python`` or ``python3``.

..  code-block:: shell

    python run.py cs_param_study.yml

If iVABS has been installed properly, it will generate a complete list of output files shown in the section below (:ref:`section-start_file_out`).
In the file ``cs_param_study.out``, the following message should appear at the end of the file.

..  code-block:: none

    <<<<< Iterator multidim_parameter_study completed.
    <<<<< Environment execution completed.
    DAKOTA execution time in seconds:
    Total CPU        =     34.003 [parent =     34.003, child =          0]
    Total wall clock =     34.003

Running time usually takes less than one minute depending on the computer.




Files for this example
---------------------

This example carries out a simple parameter study of a single cross-section by varying two design variables.
The base design of this cross-section has an airfoil profile with a main box-type spar, which is typically seen in helicopter rotor blades.
The two design variables control the locations of the front and back spar webs. Please refer to ???? for a detailed explanation of this example. 

Below is a brief explanation for the input files and output files  used for this example.

Input files
~~~~~~~~~~~

``airfoil_gbox_uni.xml.tmp``
    This is the design template for the type of cross-section having an airfoil profile with a main box-type spar. Depending on the problem, one or more design templates might be needed. More details on design templates can be found in Section :ref:`section-cs-templates`.

``material_database_us_ft.xml``
    This is the material database used by the cross-section. More details on the material inputs can be found in Section :ref:`section-material-layup`.

``SC1095.dat``
    This is the airfoil data file for the cross-section. Depending on the problem, one or more airfoil data files might be needed. 

``cs_param_study.yml``
    This is the main input file required for all cases. It contains most of the information needed. More details on the main input file can be found in Section :ref:`section-input-guide`.

``run.py``
    This is the startup script. It is required for all cases, but no changes needed and can be directly copied to a different working directory.


.. _section-start_file_out:

Output files
~~~~~~~~~~~~

Current version of iVABS uses Dakota as the driver. Hence, most output files are related to Dakota.

``cs_param_study.dakota``
    This is the Dakota input generated by iVABS from ``cs_param_study.yml``.

``cs_param_study.out``
    This is the Dakota main output file including a summary of the process.

``cs_param_study.results.txt``
    This is the Dakota result file. Contents could be different for different Dakota methods.

``cs_param_study_tabular.dat``
    This contains a table of inputs and outputs of each evaluation/iteration.

``cs_param_study.rst``
    This is the Dakota restart file.
    If the Dakota process stops for some reason, you can try to continue the process from the stopping point, using the following command::

        dakota -i cs_param_study.dakota -read_restart cs_param_study.rst

``cs_param_study.err``
    This is the Dakota error file.

``evals/eval.#/``
    Each directory contains all input and output files for each evaluation/iteration. Links for the five input files are also generated in these directories.  


iVABS running options
---------------------

The general command syntax to run an iVABS study is

..  code-block:: shell

    python run.py main_input.yml [mode] [dakota_params.in dakota_results.out]

There are three running modes:

#. Mode 0 is the default mode. It will generate Dakota input and run.

   ..  code-block:: shell

    python run.py main_input.yml


#. Mode 1 runs a single analysis. This mode is mainly for the use by Dakota for each evaluation/iteration.


   ..  code-block:: shell

    python run.py main_input.yml 1 params.in results.out

#. Mode 2 only generates Dakota input. The process stops after generating the Dakota input.

   ..  code-block:: shell

    python run.py main_input.yml 2






Other examples
--------------

More examples can be found in Section :ref:`section-ivabs-examples`.
